{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PHP Graphviz Documentation This documentation is the usage manual of the PHP Graphviz library. Use the menu on the left to navigate through it.","title":"Homepage"},{"location":"#php-graphviz-documentation","text":"This documentation is the usage manual of the PHP Graphviz library. Use the menu on the left to navigate through it.","title":"PHP Graphviz Documentation"},{"location":"getting-started/","text":"Getting started Installation Add PHP Graphviz as a dependency to your project using Composer . In the root directory of your project, run: composer require alom/graphviz Render a graph In your project, create a file test-graphviz.php , in the directory of your composer.json : <?php require_once __DIR__.'/vendor/autoload.php'; $graph = new Graphviz\\Digraph(); $graph ->subgraph('cluster_1') ->attr('node', ['style' => 'filled', 'fillcolor' => 'blue']) ->node('A') ->node('B') ->end() ->edge(array('A', 'B', 'C')) ; echo $graph->render(); This script, when executed, will render the following: digraph G { subgraph cluster_1 { node [style=filled, fillcolor=blue]; A; B; } A -> B -> C; } Convert graph to an image This library only render dot language. If you want to generate an image out of it, you must install graphviz and run the following command: php test-graphviz.php | dot -Tpng > test-graphviz.png","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Add PHP Graphviz as a dependency to your project using Composer . In the root directory of your project, run: composer require alom/graphviz","title":"Installation"},{"location":"getting-started/#render-a-graph","text":"In your project, create a file test-graphviz.php , in the directory of your composer.json : <?php require_once __DIR__.'/vendor/autoload.php'; $graph = new Graphviz\\Digraph(); $graph ->subgraph('cluster_1') ->attr('node', ['style' => 'filled', 'fillcolor' => 'blue']) ->node('A') ->node('B') ->end() ->edge(array('A', 'B', 'C')) ; echo $graph->render(); This script, when executed, will render the following: digraph G { subgraph cluster_1 { node [style=filled, fillcolor=blue]; A; B; } A -> B -> C; }","title":"Render a graph"},{"location":"getting-started/#convert-graph-to-an-image","text":"This library only render dot language. If you want to generate an image out of it, you must install graphviz and run the following command: php test-graphviz.php | dot -Tpng > test-graphviz.png","title":"Convert graph to an image"},{"location":"examples/basic/","text":"Basic example $graph = new Graphviz\\Digraph(); $graph ->subgraph('cluster_0') ->set('style', 'filled') ->set('color', 'lightgrey') ->attr('node', ['style' => 'filled', 'color' => 'white']) ->edge(['a0', 'a1', 'a2', 'a3']) ->set('label', 'process #1') ->end() ->subgraph('cluster_1') ->attr('node', ['style' => 'filled']) ->edge(['b0', 'b1', 'b2', 'b3']) ->set('label', 'process #2') ->set('color', 'blue') ->end() ->edge(['start', 'a0']) ->edge(['start', 'b0']) ->edge(['a1', 'b3']) ->edge(['b2', 'a3']) ->edge(['a3', 'a0']) ->edge(['a3', 'end']) ->edge(['b3', 'end']) ;","title":"Basic example"},{"location":"examples/basic/#basic-example","text":"$graph = new Graphviz\\Digraph(); $graph ->subgraph('cluster_0') ->set('style', 'filled') ->set('color', 'lightgrey') ->attr('node', ['style' => 'filled', 'color' => 'white']) ->edge(['a0', 'a1', 'a2', 'a3']) ->set('label', 'process #1') ->end() ->subgraph('cluster_1') ->attr('node', ['style' => 'filled']) ->edge(['b0', 'b1', 'b2', 'b3']) ->set('label', 'process #2') ->set('color', 'blue') ->end() ->edge(['start', 'a0']) ->edge(['start', 'b0']) ->edge(['a1', 'b3']) ->edge(['b2', 'a3']) ->edge(['a3', 'a0']) ->edge(['a3', 'end']) ->edge(['b3', 'end']) ;","title":"Basic example"},{"location":"examples/subgraph/","text":"Subgraph examples Cluster $graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('cluster_A') ->set('bgcolor', '#ffcc00') ->set('label', 'Title of the cluster A') ->nodes(['D', 'E']) ->end() ->subgraph('cluster_B') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ; Nested graph $graph = new Graphviz\\Digraph(); $graph->node('A')->edge(['A', 'B']); $sub1 = $graph ->subgraph('cluster_1') ->node('B') ->edge(['B', 'C']) ; $sub2 = $sub1->subgraph('cluster_2') ->node('C') ->edge(['C', 'D']) ; $sub3 = $sub2->subgraph('cluster_3') ->node('D') ;","title":"Subgraph"},{"location":"examples/subgraph/#subgraph-examples","text":"","title":"Subgraph examples"},{"location":"examples/subgraph/#cluster","text":"$graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('cluster_A') ->set('bgcolor', '#ffcc00') ->set('label', 'Title of the cluster A') ->nodes(['D', 'E']) ->end() ->subgraph('cluster_B') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ;","title":"Cluster"},{"location":"examples/subgraph/#nested-graph","text":"$graph = new Graphviz\\Digraph(); $graph->node('A')->edge(['A', 'B']); $sub1 = $graph ->subgraph('cluster_1') ->node('B') ->edge(['B', 'C']) ; $sub2 = $sub1->subgraph('cluster_2') ->node('C') ->edge(['C', 'D']) ; $sub3 = $sub2->subgraph('cluster_3') ->node('D') ;","title":"Nested graph"},{"location":"examples/table/","text":"Tables examples $graph = new Graphviz\\Digraph(); $graph ->node('escaped', [ 'label' => '<<table><tr><td>Should be escaped</td></tr></table>>', ]) ->node('unescaped', [ 'label' => new Graphviz\\RawText('<<table><tr><td>Should not</td><td>be escaped</td></tr></table>>'), ]) ;","title":"Tables"},{"location":"examples/table/#tables-examples","text":"$graph = new Graphviz\\Digraph(); $graph ->node('escaped', [ 'label' => '<<table><tr><td>Should be escaped</td></tr></table>>', ]) ->node('unescaped', [ 'label' => new Graphviz\\RawText('<<table><tr><td>Should not</td><td>be escaped</td></tr></table>>'), ]) ;","title":"Tables examples"},{"location":"graphviz/subgraph/","text":"Subgraph A subgraph is a subset of a graph. It can be used in both a directed graph ( Graphviz\\Digraph ) and an undirected graph ( Graphviz\\Graph ). Here is an example: $graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('1') ->nodes(['D', 'E']) ->end() ->subgraph('2') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ; As you can see, there is no grouping of the nodes, visually, in the graph. If you want a group, please use the cluster feature (see below). Cluster When a subgraph names starts with cluster_ , the graph is rendered differently: $graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('cluster_A') ->nodes(['D', 'E']) ->end() ->subgraph('cluster_B') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ; See also Subgraph examples","title":"Subgraph"},{"location":"graphviz/subgraph/#subgraph","text":"A subgraph is a subset of a graph. It can be used in both a directed graph ( Graphviz\\Digraph ) and an undirected graph ( Graphviz\\Graph ). Here is an example: $graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('1') ->nodes(['D', 'E']) ->end() ->subgraph('2') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ; As you can see, there is no grouping of the nodes, visually, in the graph. If you want a group, please use the cluster feature (see below).","title":"Subgraph"},{"location":"graphviz/subgraph/#cluster","text":"When a subgraph names starts with cluster_ , the graph is rendered differently: $graph = new Graphviz\\Digraph(); $graph ->nodes(['A', 'B', 'C']) ->subgraph('cluster_A') ->nodes(['D', 'E']) ->end() ->subgraph('cluster_B') ->nodes(['F', 'G']) ->end() ->edge(['A', 'C']) ->edge(['B', 'D', 'F']) ->edge(['D', 'E']) ->edge(['B', 'G']) ;","title":"Cluster"},{"location":"graphviz/subgraph/#see-also","text":"Subgraph examples","title":"See also"},{"location":"usage/attributes/","text":"Setting attributes Graph attributes To define an attribute on your graph, use the set method: # Directed graph $graph = new Graphviz\\Digraph(); $graph->set('bgcolor', 'red'); $graph->nodes(['foo', 'bar']); Node, edge, and graph attributes The DOT language allows you to define attributes that are used for all the following nodes, edges, or for the current graph: # Directed graph $graph = new Graphviz\\Digraph(); $graph ->attr('node', ['style' => 'filled', 'fillcolor' => 'yellow']) ->attr('edge', ['color' => 'blue']) ->nodes(['foo', 'bar']) ->subgraph('cluster_baz') ->attr('graph', ['bgcolor' => 'green']) ->nodes(['A', 'B', 'C']) ->end() ->edge(['foo', 'B']) ->edge(['bar', 'C']) ;","title":"Setting attributes"},{"location":"usage/attributes/#setting-attributes","text":"","title":"Setting attributes"},{"location":"usage/attributes/#graph-attributes","text":"To define an attribute on your graph, use the set method: # Directed graph $graph = new Graphviz\\Digraph(); $graph->set('bgcolor', 'red'); $graph->nodes(['foo', 'bar']);","title":"Graph attributes"},{"location":"usage/attributes/#node-edge-and-graph-attributes","text":"The DOT language allows you to define attributes that are used for all the following nodes, edges, or for the current graph: # Directed graph $graph = new Graphviz\\Digraph(); $graph ->attr('node', ['style' => 'filled', 'fillcolor' => 'yellow']) ->attr('edge', ['color' => 'blue']) ->nodes(['foo', 'bar']) ->subgraph('cluster_baz') ->attr('graph', ['bgcolor' => 'green']) ->nodes(['A', 'B', 'C']) ->end() ->edge(['foo', 'B']) ->edge(['bar', 'C']) ;","title":"Node, edge, and graph attributes"},{"location":"usage/creation/","text":"Creating a graph To create a graph, instantiate a Graphviz\\Digraph or a Graphviz\\Graph object: # Directed graph $graph = new Graphviz\\Digraph(); # Undirected graph $graph = new Graphviz\\Graph(); Those two objects are mostly identical, and methods documented in the next chapters are available for both objects. Directed graph A directed graph can be created by using the Graphviz\\Digraph class when you instantiate your graph: $graph = new Graphviz\\Digraph(); $graph->set('rankdir', 'LR'); $graph->edge(['Alice', 'Bob', 'Charlie']); $graph->edge(['Alice', 'Charlie']); Undirected graph An undirected graph can be created by using the Graphviz\\Graph class when you instantiate your graph: $graph = new Graphviz\\Graph(); $graph->set('rankdir', 'LR'); $graph->edge(['Alice', 'Bob', 'Charlie']); $graph->edge(['Alice', 'Charlie']);","title":"Create a graph"},{"location":"usage/creation/#creating-a-graph","text":"To create a graph, instantiate a Graphviz\\Digraph or a Graphviz\\Graph object: # Directed graph $graph = new Graphviz\\Digraph(); # Undirected graph $graph = new Graphviz\\Graph(); Those two objects are mostly identical, and methods documented in the next chapters are available for both objects.","title":"Creating a graph"},{"location":"usage/creation/#directed-graph","text":"A directed graph can be created by using the Graphviz\\Digraph class when you instantiate your graph: $graph = new Graphviz\\Digraph(); $graph->set('rankdir', 'LR'); $graph->edge(['Alice', 'Bob', 'Charlie']); $graph->edge(['Alice', 'Charlie']);","title":"Directed graph"},{"location":"usage/creation/#undirected-graph","text":"An undirected graph can be created by using the Graphviz\\Graph class when you instantiate your graph: $graph = new Graphviz\\Graph(); $graph->set('rankdir', 'LR'); $graph->edge(['Alice', 'Bob', 'Charlie']); $graph->edge(['Alice', 'Charlie']);","title":"Undirected graph"},{"location":"usage/edges/","text":"Edges In a graph object, you can create edges using the edge method Creating an edge The method edge allows the creation of an edge with any number of node identifiers: $graph = new Graphviz\\Digraph(); $graph->set('rankdir', 'LR'); $graph->edge(['foo', 'bar', 'baz']); Edge attributes You can pass attributes to your edge by providing a second argument with an array associating names with values: $graph = new Graphviz\\Digraph(); $graph->edge(['foo', 'bar'], [ 'style' => 'dashed', 'color' => 'red', ]); Targeting a port identifier If you have created a port identifier inside a record, you can make your edge target this port by providing an array instead of a string. $graph = new Graphviz\\Digraph(); $graph->node('week', [ 'shape' => 'record', 'label' => 'Monday|Tuesday|<wed> Wednesday|Thursday|Friday', ]); $graph->node('people', [ 'shape' => 'record', 'label' => 'Alice|<bob> Bob|Charlie', ]); $graph->edge([ ['week', 'wed'], ['people', 'bob'], ]);","title":"Edges"},{"location":"usage/edges/#edges","text":"In a graph object, you can create edges using the edge method","title":"Edges"},{"location":"usage/edges/#creating-an-edge","text":"The method edge allows the creation of an edge with any number of node identifiers: $graph = new Graphviz\\Digraph(); $graph->set('rankdir', 'LR'); $graph->edge(['foo', 'bar', 'baz']);","title":"Creating an edge"},{"location":"usage/edges/#edge-attributes","text":"You can pass attributes to your edge by providing a second argument with an array associating names with values: $graph = new Graphviz\\Digraph(); $graph->edge(['foo', 'bar'], [ 'style' => 'dashed', 'color' => 'red', ]);","title":"Edge attributes"},{"location":"usage/edges/#targeting-a-port-identifier","text":"If you have created a port identifier inside a record, you can make your edge target this port by providing an array instead of a string. $graph = new Graphviz\\Digraph(); $graph->node('week', [ 'shape' => 'record', 'label' => 'Monday|Tuesday|<wed> Wednesday|Thursday|Friday', ]); $graph->node('people', [ 'shape' => 'record', 'label' => 'Alice|<bob> Bob|Charlie', ]); $graph->edge([ ['week', 'wed'], ['people', 'bob'], ]);","title":"Targeting a port identifier"},{"location":"usage/nodes/","text":"Nodes Different methods are available on the graph objects to create a node. Creating a single node You can simply call node with the identifier of the node you want to create: $graph = new Graphviz\\Digraph(); $graph->node('foo'); This method returns the Graph object, so you can chain multiple calls: $graph = new Graphviz\\Digraph(); $graph ->node('foo') ->node('bar') ; Passing attributes to a node To provide attributes to a node, pass them as a second array to this method with an association between the parameter names and the parameter values: $graph = new Graphviz\\Digraph(); $graph->node('foo', [ 'shape' => 'record', 'label' => 'This is the label of the node' ]); Creating multiple nodes A method named nodes is available for you to create multiple nodes at once: $graph = new Graphviz\\Digraph(); $graph->nodes(['foo', 'bar', 'baz']); You can pass attributes to a node by providing it an associative array: $graph = new Graphviz\\Digraph(); $graph->nodes([ 'foo', 'bar' => ['shape' => 'record'], 'baz', ]); The Node object The node method is fluid, meaning it returns the Graph object so that you can chain multiple calls. But you can also call the beginNode method, so that you have the object for manipulation: $graph = new Graphviz\\Digraph(); $node = $graph->beginNode('foo'); # Set a value $node->attribute('shape', 'record'); $node->attribute('label', 'This is the label'); # Get a value $value = $node->getAttribute('shape'); Accessing an existing Node object If you already added a Node to your graph, you can access it, given you have its identifier, using the get method: $graph = new Graphviz\\Digraph(); $graph->node('foo'); $foo = $graph->get('foo'); $foo->attribute('shape', 'record');","title":"Nodes"},{"location":"usage/nodes/#nodes","text":"Different methods are available on the graph objects to create a node.","title":"Nodes"},{"location":"usage/nodes/#creating-a-single-node","text":"You can simply call node with the identifier of the node you want to create: $graph = new Graphviz\\Digraph(); $graph->node('foo'); This method returns the Graph object, so you can chain multiple calls: $graph = new Graphviz\\Digraph(); $graph ->node('foo') ->node('bar') ;","title":"Creating a single node"},{"location":"usage/nodes/#passing-attributes-to-a-node","text":"To provide attributes to a node, pass them as a second array to this method with an association between the parameter names and the parameter values: $graph = new Graphviz\\Digraph(); $graph->node('foo', [ 'shape' => 'record', 'label' => 'This is the label of the node' ]);","title":"Passing attributes to a node"},{"location":"usage/nodes/#creating-multiple-nodes","text":"A method named nodes is available for you to create multiple nodes at once: $graph = new Graphviz\\Digraph(); $graph->nodes(['foo', 'bar', 'baz']); You can pass attributes to a node by providing it an associative array: $graph = new Graphviz\\Digraph(); $graph->nodes([ 'foo', 'bar' => ['shape' => 'record'], 'baz', ]);","title":"Creating multiple nodes"},{"location":"usage/nodes/#the-node-object","text":"The node method is fluid, meaning it returns the Graph object so that you can chain multiple calls. But you can also call the beginNode method, so that you have the object for manipulation: $graph = new Graphviz\\Digraph(); $node = $graph->beginNode('foo'); # Set a value $node->attribute('shape', 'record'); $node->attribute('label', 'This is the label'); # Get a value $value = $node->getAttribute('shape');","title":"The Node object"},{"location":"usage/nodes/#accessing-an-existing-node-object","text":"If you already added a Node to your graph, you can access it, given you have its identifier, using the get method: $graph = new Graphviz\\Digraph(); $graph->node('foo'); $foo = $graph->get('foo'); $foo->attribute('shape', 'record');","title":"Accessing an existing Node object"},{"location":"usage/rendering/","text":"Rendering a graph Once you have created your graph, you can render the dot file by using the render() method available on the Graph objects: $graph = new Graphviz\\Digraph(); $graph->edge(['Alice', 'Bob']); echo $graph->render(); This script will output the following: digraph G { Alice -> Bob; } This file is in DOT language, the format used by Graphviz. Indentation of the output You can change the indentation of the graph by using the Graphviz\\Output\\DotRenderer explicitly: $renderer = new Graphviz\\Output\\DotRenderer(' '); echo $renderer->render($graph); The first argument of the DotRenderer is the indentation to use for the graph. With this example, the output will be: digraph G { Alice -> Bob; }","title":"Render a graph"},{"location":"usage/rendering/#rendering-a-graph","text":"Once you have created your graph, you can render the dot file by using the render() method available on the Graph objects: $graph = new Graphviz\\Digraph(); $graph->edge(['Alice', 'Bob']); echo $graph->render(); This script will output the following: digraph G { Alice -> Bob; } This file is in DOT language, the format used by Graphviz.","title":"Rendering a graph"},{"location":"usage/rendering/#indentation-of-the-output","text":"You can change the indentation of the graph by using the Graphviz\\Output\\DotRenderer explicitly: $renderer = new Graphviz\\Output\\DotRenderer(' '); echo $renderer->render($graph); The first argument of the DotRenderer is the indentation to use for the graph. With this example, the output will be: digraph G { Alice -> Bob; }","title":"Indentation of the output"}]}